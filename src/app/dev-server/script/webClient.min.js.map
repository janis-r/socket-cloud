{"version":3,"file":"webClient.min.js","sources":["../node_modules/tslib/tslib.es6.js","../src/lib/utils/CallbackCollection.ts","../src/lib/deliveryProtocolClient/model/WebSocketAdapter.ts","../node_modules/ugd10a/dist/esnext/object/object-utils.js","../node_modules/ugd10a/dist/esnext/caching/CachedCollection.js","../node_modules/ugd10a/dist/esnext/collection/CollectionAction.js","../node_modules/ugd10a/dist/esnext/queue/ExecutionQueue.js","../node_modules/ugd10a/dist/esnext/time/time-map.js","../src/lib/deliveryProtocol/data/MessageType.ts","../src/lib/utils/is-array-of.ts","../src/lib/utils/validate-object.ts","../src/lib/deliveryProtocol/util/MessageValidator.ts","../src/lib/deliveryProtocol/data/serverMessage/PushToClientMessage.ts","../src/lib/deliveryProtocol/data/cache/CachedMessage.ts","../src/lib/deliveryProtocol/data/serverMessage/RestoreChannelsResponseMessage.ts","../src/lib/deliveryProtocol/data/clientMessage/SubscribeMessage.ts","../src/lib/deliveryProtocol/data/clientMessage/UnsubscribeMessage.ts","../src/lib/deliveryProtocol/data/cache/CacheFilter.ts","../src/lib/deliveryProtocol/data/clientMessage/RestoreChannelsRequestMessage.ts","../src/lib/deliveryProtocol/data/clientMessage/PushToServerMessage.ts","../src/lib/deliveryProtocolClient/model/SocketClient.ts","../src/lib/deliveryProtocol/data/serverMessage/ServerMessage.ts","../src/lib/deliveryProtocol/data/globalMessageChannel.ts","../src/app/web-client/webClient.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export class CallbackCollection<T> {\r\n\r\n    private readonly callbacks = new Map<CallbackFunction<T>, CallbackProperties<T>>();\r\n\r\n    constructor() {\r\n        this.manage = this.manage.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Add callback to collection\r\n     * @param callback\r\n     */\r\n    readonly add = (callback: CallbackFunction<T>): CallbackManager<T> => {\r\n        const {callbacks} = this;\r\n        if (callbacks.has(callback)) {\r\n            return {success: false};\r\n        }\r\n\r\n        const callbackProps: CallbackProperties<T> = {};\r\n        callbacks.set(callback, callbackProps);\r\n\r\n        const onComplete = (callback: OnCompleteCallback) => callbackProps.onComplete = callback;\r\n        const times = (count: number) => {\r\n            callbackProps.executionLimit = count;\r\n            return {onComplete};\r\n        };\r\n        const once = () => times(1);\r\n        const twice = () => times(2);\r\n        const guard = (func: GuardFunction<T>) => {\r\n            callbackProps.guard = func;\r\n            return {once, twice, times};\r\n        };\r\n\r\n        return {success: true, guard, once, twice, times};\r\n    };\r\n    /**\r\n     * Check if collection has registered callback\r\n     * @param callback\r\n     */\r\n    readonly has = (callback: CallbackFunction<T>) => this.callbacks.has(callback);\r\n    /**\r\n     * Remove callback\r\n     * @param callback\r\n     */\r\n    readonly remove = (callback: CallbackFunction<T>): boolean => {\r\n        const {callbacks} = this;\r\n        if (callbacks.has(callback)) {\r\n            callbacks.delete(callback);\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Remove all callbacks\r\n     */\r\n    readonly clear = () => this.callbacks.clear();\r\n\r\n    /**\r\n     * Add callback to collection, if it's provided and return CallbackManager\r\n     * @param callback\r\n     */\r\n    manage(callback: CallbackFunction<T>): CallbackManager<T>;\r\n    /**\r\n     * If no callback is specified proceed to collection management methods\r\n     */\r\n    manage(): Pick<this, \"has\" | \"remove\" | \"clear\">;\r\n    manage(callback?: CallbackFunction<T>) {\r\n        if (callback) {\r\n            return this.add(callback);\r\n        }\r\n        const {has, remove, clear} = this;\r\n        return {has, remove, clear};\r\n    }\r\n\r\n    /**\r\n     * Execute all callbacks\r\n     * @param data\r\n     */\r\n    readonly execute = (data: T): number => {\r\n        const {callbacks} = this;\r\n        let executed = 0;\r\n        for (const [callback, properties] of callbacks) {\r\n            if (properties.guard && !properties.guard(data)) {\r\n                continue;\r\n            }\r\n\r\n            callback(data);\r\n            executed++;\r\n            if (properties.executionLimit) {\r\n                if (!properties.executionCount) {\r\n                    properties.executionCount = 1;\r\n                } else {\r\n                    properties.executionCount++;\r\n                }\r\n                if (properties.executionCount === properties.executionLimit) {\r\n                    if (properties.onComplete) {\r\n                        properties.onComplete();\r\n                    }\r\n                    callbacks.delete(callback);\r\n                }\r\n            }\r\n        }\r\n\r\n        return executed;\r\n    };\r\n}\r\n\r\ntype CallbackFunction<T> = (data: T) => unknown;\r\ntype GuardFunction<T> = (data: T) => boolean;\r\ntype OnCompleteCallback = () => void;\r\ntype CallbackProperties<T> = {\r\n    executionLimit?: number,\r\n    executionCount?: number,\r\n    guard?: GuardFunction<T>,\r\n    onComplete?: OnCompleteCallback\r\n};\r\n\r\nexport type CallbackManager<T> = {\r\n    /**\r\n     * Defines if callback adding was a success - one callback can be added only once and so this property will\r\n     * be true on first attempt and false on all following calls with same callback.\r\n     */\r\n    success: boolean;\r\n    /**\r\n     * Limit callback execution times to 1\r\n     */\r\n    once?: () => { onComplete: (callback: OnCompleteCallback) => void };\r\n    /**\r\n     * Limit callback execution times to 2\r\n     */\r\n    twice?: () => { onComplete: (callback: OnCompleteCallback) => void };\r\n    /**\r\n     * Limit callback execution times to value defined in param\r\n     * @param count\r\n     */\r\n    times?: (count: number) => { onComplete: (callback: OnCompleteCallback) => void };\r\n    /**\r\n     * Guard callback execution by interpreting executed callback data.\r\n     * @param func\r\n     */\r\n    guard?: (func: GuardFunction<T>) => Pick<CallbackManager<T>, \"once\" | \"twice\" | \"times\">;\r\n};\r\n\r\ntype AddCallback<T> =  (callback: CallbackFunction<T>) => CallbackManager<T>;\r\ntype ManageCallbacks<T> = () => Pick<CallbackCollection<T>, \"has\" | \"remove\" | \"clear\">;\r\nexport type Callback<T> =  AddCallback<T> | ManageCallbacks<T>;\r\n","import {CloseCode} from \"../../websocketConnection/data/CloseCode\";\r\nimport {ConnectionState} from \"../../clientConnectionPool/data/ConnectionState\";\r\nimport {CallbackCollection} from \"../../utils/CallbackCollection\";\r\nimport {Adapter} from \"../data/Adapter\";\r\n\r\nexport class WebSocketAdapter implements Adapter {\r\n\r\n    private onOpenCallback = new CallbackCollection<void>();\r\n    private onMessageCallback = new CallbackCollection<string>();\r\n    private onErrorCallback = new CallbackCollection<string>();\r\n    private onCloseCallback = new CallbackCollection<{ code?: CloseCode; reason?: string }>();\r\n\r\n    private readonly socket: WebSocket;\r\n\r\n    constructor(url: string) {\r\n        this.socket = new WebSocket(url);\r\n        this.socket.onopen = () => this.onOpenCallback.execute();\r\n        this.socket.onmessage = ({data}) => this.onMessageCallback.execute(data);\r\n        this.socket.onerror = event => this.onErrorCallback.execute(event.toString());\r\n        this.socket.onclose = ({code, reason}) => this.onCloseCallback.execute({code, reason});\r\n    }\r\n\r\n    readonly onOpen = this.onOpenCallback.manage;\r\n    readonly onMessage = this.onMessageCallback.manage;\r\n    readonly onError = this.onErrorCallback.manage;\r\n    readonly onClose = this.onCloseCallback.manage;\r\n\r\n    get state(): ConnectionState {\r\n        return this.socket.readyState;\r\n    }\r\n\r\n    send(message: string): void {\r\n        this.socket.send(message);\r\n    }\r\n\r\n    close(code?: CloseCode, reason?: string): void {\r\n        this.socket.close(code, reason);\r\n    }\r\n}\r\n","export function findObjectKeyForValue(object, value) {\r\n    const keys = Object.keys(object);\r\n    for (const key of keys) {\r\n        if (object.hasOwnProperty(key) && object[key] === value) {\r\n            return key;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nexport function valueBelongsToEnum(object, value) {\r\n    return findObjectKeyForValue(object, value) !== null;\r\n}\r\nexport function removeObjectNullValues(object) {\r\n    for (const i in object) {\r\n        if (!object.hasOwnProperty(i)) {\r\n            continue;\r\n        }\r\n        if (object[i] === null) {\r\n            delete object[i];\r\n            continue;\r\n        }\r\n        if (typeof object[i] === \"object\") {\r\n            object[i] = removeObjectNullValues(object[i]);\r\n        }\r\n    }\r\n    return object;\r\n}\r\nexport function uniqueValues(values) {\r\n    const newSet = [];\r\n    for (const entry of values) {\r\n        if (newSet.indexOf(entry) === -1) {\r\n            newSet.push(entry);\r\n        }\r\n    }\r\n    return newSet;\r\n}\r\n//# sourceMappingURL=object-utils.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { Timer } from \"../time/Timer\";\r\nimport { uniqueValues } from \"../object/object-utils\";\r\nexport class CachedCollection {\r\n    constructor(fetchFunction, ttl, inputTypeGuard) {\r\n        this.fetchFunction = fetchFunction;\r\n        this.ttl = ttl;\r\n        this.inputTypeGuard = inputTypeGuard;\r\n        this.dataCache = new Map();\r\n        this.dataFetchesInProgress = new Map();\r\n        this.cleanupInterval = null;\r\n        if (!fetchFunction) {\r\n            throw new Error(`CachedCollection error - fetchFunction is not provided`);\r\n        }\r\n        if (isNaN(ttl) || ttl <= 0) {\r\n            throw new Error(`CachedCollection error - ttl (${ttl}) is not usable`);\r\n        }\r\n    }\r\n    getData(itemIds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { inputTypeGuard, dataCache, dataFetchesInProgress, fetchFunction } = this;\r\n            const response = new Map();\r\n            if (!itemIds || !itemIds.size) {\r\n                return response;\r\n            }\r\n            if (inputTypeGuard !== undefined && [...itemIds].some(entry => !inputTypeGuard(entry))) {\r\n                throw new Error(`CachedCollection error - some of item ids ${JSON.stringify([...itemIds])} are invalid according to type guard`);\r\n            }\r\n            const dataPromises = new Set();\r\n            const entriesToFetch = new Set();\r\n            for (const itemId of itemIds) {\r\n                if (dataCache.has(itemId)) {\r\n                    const data = dataCache.get(itemId);\r\n                    data.lastAccess = Timer.now;\r\n                    response.set(itemId, data.data);\r\n                }\r\n                else if (dataFetchesInProgress.has(itemId)) {\r\n                    dataPromises.add(dataFetchesInProgress.get(itemId));\r\n                }\r\n                else {\r\n                    entriesToFetch.add(itemId);\r\n                }\r\n            }\r\n            if (entriesToFetch.size > 0) {\r\n                const fetchCall = () => __awaiter(this, void 0, void 0, function* () {\r\n                    const dataPromise = new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\r\n                        const newEntries = yield fetchFunction(entriesToFetch);\r\n                        const { now: lastAccess } = Timer;\r\n                        for (const [input, data] of newEntries) {\r\n                            dataCache.set(input, { data, lastAccess });\r\n                        }\r\n                        resolve();\r\n                    }));\r\n                    entriesToFetch.forEach(input => dataFetchesInProgress.set(input, dataPromise));\r\n                    yield dataPromise;\r\n                    entriesToFetch.forEach(input => dataFetchesInProgress.delete(input));\r\n                });\r\n                dataPromises.add(fetchCall());\r\n            }\r\n            if (dataPromises.size > 0) {\r\n                yield Promise.all([...dataPromises]);\r\n                [...itemIds].filter(input => !response.has(input)).forEach(input => {\r\n                    if (!dataCache.has(input)) {\r\n                        console.debug(`CachedCollection error while fetching data for ${input}`);\r\n                    }\r\n                    else {\r\n                        response.set(input, dataCache.get(input).data);\r\n                    }\r\n                });\r\n            }\r\n            this.checkCleanupStatus();\r\n            return response;\r\n        });\r\n    }\r\n    delete(...itemsIds) {\r\n        return uniqueValues(itemsIds).map(id => this.dataCache.delete(id)).filter(state => state).length;\r\n    }\r\n    purge() {\r\n        const { dataCache, ttl } = this;\r\n        const { now } = Timer;\r\n        let deleteCount = 0;\r\n        for (const [input, { lastAccess }] of dataCache) {\r\n            if (lastAccess + ttl < now) {\r\n                dataCache.delete(input);\r\n                deleteCount++;\r\n            }\r\n        }\r\n        if (deleteCount > 0) {\r\n            this.checkCleanupStatus();\r\n        }\r\n        return deleteCount;\r\n    }\r\n    get size() {\r\n        return this.dataCache.size;\r\n    }\r\n    get entriesInProgress() {\r\n        return this.dataFetchesInProgress.size;\r\n    }\r\n    checkCleanupStatus() {\r\n        const { dataCache, ttl } = this;\r\n        if (dataCache.size > 0 && !this.cleanupInterval) {\r\n            this.cleanupInterval = setInterval(() => this.purge(), ttl);\r\n        }\r\n        else if (dataCache.size === 0 && !!this.cleanupInterval) {\r\n            clearInterval(this.cleanupInterval);\r\n            this.cleanupInterval = null;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=CachedCollection.js.map","export var CollectionAction;\r\n(function (CollectionAction) {\r\n    CollectionAction[CollectionAction[\"Add\"] = 0] = \"Add\";\r\n    CollectionAction[CollectionAction[\"Remove\"] = 1] = \"Remove\";\r\n    CollectionAction[CollectionAction[\"Clear\"] = 2] = \"Clear\";\r\n    CollectionAction[CollectionAction[\"Commit\"] = 3] = \"Commit\";\r\n})(CollectionAction || (CollectionAction = {}));\r\n//# sourceMappingURL=CollectionAction.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nexport class ExecutionQueue {\r\n    constructor() {\r\n        this.queue = new Array();\r\n        this.enqueue = (action) => __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => {\r\n                const { queue } = this;\r\n                queue.push(() => __awaiter(this, void 0, void 0, function* () {\r\n                    try {\r\n                        const response = yield action();\r\n                        resolve(response);\r\n                        return response;\r\n                    }\r\n                    catch (e) {\r\n                        reject(e);\r\n                        return null;\r\n                    }\r\n                }));\r\n                if (queue.length === 1) {\r\n                    this.executeNext();\r\n                }\r\n            });\r\n        });\r\n    }\r\n    executeNext() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { queue } = this;\r\n            if (queue.length === 0) {\r\n                return;\r\n            }\r\n            yield queue[0]();\r\n            queue.shift();\r\n            this.executeNext();\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=ExecutionQueue.js.map","export const timeToObject = (time) => {\r\n    const values = [\r\n        [TimePart.Date, time.getDate()],\r\n        [TimePart.Month, time.getMonth() + 1],\r\n        [TimePart.Year, time.getFullYear()],\r\n        [TimePart.Hours, time.getHours()],\r\n        [TimePart.Minutes, time.getMinutes()],\r\n        [TimePart.Seconds, time.getSeconds()],\r\n        [TimePart.Epoch, time.getTime()]\r\n    ];\r\n    const timeMap = {};\r\n    values.forEach(([key, value]) => timeMap[key] = value);\r\n    return Object.assign(Object.assign({}, timeMap), { toMap: () => new Map(values) });\r\n};\r\nexport const timeToMap = (time) => timeToObject(time).toMap();\r\nexport const currentDateToMap = () => timeToMap(new Date());\r\nexport const currentDateToObject = () => timeToObject(new Date());\r\nexport var TimePart;\r\n(function (TimePart) {\r\n    TimePart[\"Date\"] = \"date\";\r\n    TimePart[\"Month\"] = \"month\";\r\n    TimePart[\"Year\"] = \"year\";\r\n    TimePart[\"Hours\"] = \"hours\";\r\n    TimePart[\"Minutes\"] = \"minutes\";\r\n    TimePart[\"Seconds\"] = \"seconds\";\r\n    TimePart[\"Epoch\"] = \"epoch\";\r\n})(TimePart || (TimePart = {}));\r\n//# sourceMappingURL=time-map.js.map","export enum MessageType {\r\n    Subscribe,\r\n    Unsubscribe,\r\n    PushToServer,\r\n    PushToClient,\r\n    RestoreRequest,\r\n    RestoreResponse\r\n}\r\n","export const isArrayOfStrings = (entry: unknown): entry is Array<string> => Array.isArray(entry) && !entry.some(v => typeof v !== \"string\");\r\nexport const isArrayOfNumbers = (entry: unknown): entry is Array<number> => Array.isArray(entry) && !entry.some(v => typeof v !== \"number\");\r\n","import {isArrayOfStrings} from \"./is-array-of\";\r\nimport {uniqueValues} from \"ugd10a\";\r\n\r\nexport function validateObject(value: unknown, configuration: FieldConfiguration[], allowExtraFields = false): true | ObjectValidationError {\r\n    if (typeof value !== \"object\") {\r\n        return {error: `Value is not an object: ${value}`};\r\n    }\r\n\r\n    const valueKeys = Object.keys(value);\r\n    for (const config of configuration) {\r\n        const {field: f, optional, exactValue, type, validator, notEmpty, itemValidator} = config;\r\n        const field = f as string;\r\n\r\n        const index = valueKeys.indexOf(field as string);\r\n        if (index === -1) {\r\n            if (optional) {\r\n                continue;\r\n            }\r\n            return {field, error: `Field is missing`};\r\n        }\r\n\r\n        const entryValue = value[field];\r\n\r\n        if ('exactValue' in config && entryValue !== exactValue) {\r\n            return {field, error: `Exact value mismatch. Expected: ${exactValue}, actual: ${entryValue}`};\r\n        }\r\n        if (type) {\r\n            if (isArrayOfStrings(type)) {\r\n                const uniqueTypes = uniqueValues(type);\r\n                if (!uniqueTypes.some(t => checkType(entryValue, t, notEmpty, itemValidator) === true)) {\r\n                    return {field, error: `Type mismatch. Value didn't match any of [${uniqueTypes}] types allowed`};\r\n                }\r\n            } else {\r\n                const typeResult = checkType(entryValue, type, notEmpty, itemValidator);\r\n                if (typeResult !== true) {\r\n                    return {field, ...typeResult};\r\n                }\r\n            }\r\n        }\r\n        if (validator && !validator(entryValue, field)) {\r\n            return {field, error: `Value ${entryValue} disallowed by validator`};\r\n        }\r\n        valueKeys.splice(index, 1);\r\n    }\r\n\r\n    if (valueKeys.length > 0 && !allowExtraFields) {\r\n        return {error: `Extra, disallowed fields [${valueKeys}] encountered`};\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction checkType(value: unknown, type: SupportedType, notEmpty: boolean, itemValidator: FieldConfiguration['itemValidator']): true | { error: string } {\r\n    if (type === \"array\") {\r\n        if (!Array.isArray(value)) {\r\n            return {error: `Type mismatch. Type is expected to be an array`};\r\n        }\r\n        if (notEmpty && !value.length) {\r\n            return {error: `Array is empty.`};\r\n        }\r\n        if (itemValidator) {\r\n            if (value.some(entry => !itemValidator(entry))) {\r\n                return {error: `Array item type mismatch.`};\r\n            }\r\n        }\r\n    } else if (type === \"string[]\") {\r\n        if (!isArrayOfStrings(value)) {\r\n            return {error: `Type mismatch. Type is expected to be an array of strings`};\r\n        }\r\n        if (notEmpty && !value.length) {\r\n            return {error: `Array length mismatch - is empty.`};\r\n        }\r\n        if (itemValidator) {\r\n            if (value.some(entry => !itemValidator(entry))) {\r\n                return {error: `Array item type mismatch.`};\r\n            }\r\n        }\r\n    } else {\r\n        const actualType = typeof value;\r\n        if (type !== actualType) {\r\n            return {error: `Type mismatch. Expected: ${type}, actual: ${actualType}`};\r\n        }\r\n        if (notEmpty && typeof value === \"string\" && !value.length) {\r\n            return {error: `String length mismatch - is empty.`};\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\ntype SupportedType =\r\n    \"undefined\"\r\n    | \"object\"\r\n    | \"boolean\"\r\n    | \"number\"\r\n    | \"bigint\"\r\n    | \"string\"\r\n    | \"string[]\"\r\n    | \"symbol\"\r\n    | \"function\"\r\n    | \"array\";\r\n\r\nexport type FieldConfiguration<T extends Record<string, any> = any> = {\r\n    field: keyof T,\r\n    optional?: true,\r\n    exactValue?: any,\r\n    type?: SupportedType | SupportedType[],\r\n    validator?: (value: any, field?: keyof T) => boolean,\r\n    notEmpty?: boolean,\r\n    itemValidator?: (value: any) => boolean\r\n}\r\n\r\nexport type ObjectValidationError = { field?: string, error: string };\r\n","import {FieldConfiguration, validateObject} from \"../../utils/validate-object\";\r\nimport {uniqueValues} from \"ugd10a\";\r\n\r\nexport class MessageValidator<T> {\r\n\r\n    private readonly allFields: string[];\r\n    private readonly requiredFields: string[];\r\n    private readonly configMap: Map<string, Configuration<T>>;\r\n    private readonly fieldSerializers: Map<string, Configuration<T>['itemSerializer']>;\r\n    private readonly fieldDeserializers: Map<string, Configuration<T>['itemDeserializer']>;\r\n    private _lastValidationError;\r\n\r\n    constructor(readonly config: ReadonlyArray<Configuration<T>>) {\r\n        const allFields = [];\r\n        const requiredFields = [];\r\n        const configMap = new Map<string, Configuration<T>>();\r\n        const fieldSerializers = new Map<string, Configuration<T>['itemSerializer']>();\r\n        const fieldDeserializers = new Map<string, Configuration<T>['itemDeserializer']>();\r\n\r\n        config.map(value => {\r\n            const {field, optional} = value;\r\n            configMap.set(field as string, value);\r\n            if (value.itemSerializer) {\r\n                fieldSerializers.set(field as string, value.itemSerializer);\r\n            }\r\n            if (value.itemDeserializer) {\r\n                fieldDeserializers.set(field as string, value.itemDeserializer);\r\n            }\r\n            return {field: field as string, optional};\r\n        }).forEach(({field, optional}) => {\r\n            allFields.push(field);\r\n            if (optional) {\r\n                requiredFields.push(field);\r\n            }\r\n        });\r\n        this.allFields = allFields;\r\n        this.requiredFields = requiredFields;\r\n        this.configMap = configMap;\r\n        this.fieldSerializers = fieldSerializers;\r\n        this.fieldDeserializers = fieldDeserializers;\r\n    }\r\n\r\n    get lastValidationError() {\r\n        return this._lastValidationError;\r\n    }\r\n\r\n    readonly validate = (value: unknown): value is T => {\r\n        const result = validateObject(value, this.config as any);\r\n        this._lastValidationError = result === true ? null : result;\r\n        return result === true;\r\n    };\r\n\r\n    readonly serialize = (value: T): string | null => {\r\n        const {validate, allFields, fieldSerializers} = this;\r\n        if (!validate(value)) {\r\n            return null;\r\n        }\r\n        return JSON.stringify(allFields.map(field => {\r\n            if (fieldSerializers.has(field)) {\r\n                const entrySerializer = fieldSerializers.get(field);\r\n                const {type} = this.configMap.get(field);\r\n                if (type === \"array\" || type === \"string[]\") {\r\n                    return value[field].map(entrySerializer);\r\n                }\r\n                return entrySerializer(value[field]);\r\n            }\r\n            return value[field];\r\n        }));\r\n    };\r\n\r\n    readonly deserialize = (value: string | Array<any>): T | null => {\r\n        const {allFields, fieldDeserializers, configMap} = this;\r\n        let data;\r\n        if (typeof value === \"string\") {\r\n            try {\r\n                data = JSON.parse(value);\r\n            } catch (e) {\r\n                console.log(`Error while deserialize`, {value, e});\r\n                return null;\r\n            }\r\n        } else {\r\n            data = value;\r\n        }\r\n\r\n        if (!Array.isArray(data) || data.length != allFields.length) {\r\n            console.log(`Error while deserialize - not enough fields`, value);\r\n            return null;\r\n        }\r\n\r\n        const parsed = {};\r\n        allFields.forEach(field => {\r\n            const rawValue = data.shift();\r\n            let parsedValue;\r\n            if (fieldDeserializers.has(field)) {\r\n                const entryDeserializer = fieldDeserializers.get(field);\r\n                const {type} = this.configMap.get(field);\r\n                if (type === \"array\" || type === \"string[]\") {\r\n                    parsedValue = rawValue.map(entryDeserializer);\r\n                } else {\r\n                    parsedValue = entryDeserializer(rawValue);\r\n                }\r\n            } else {\r\n                parsedValue = rawValue;\r\n            }\r\n\r\n            if (Array.isArray(parsedValue) && configMap.get(field).unique) {\r\n                parsed[field] = uniqueValues(parsedValue);\r\n            } else if (parsedValue !== null || !configMap.get(field).optional) {\r\n                parsed[field] = parsedValue;\r\n            }\r\n        });\r\n\r\n        if (this.validate(parsed)) {\r\n            return parsed;\r\n        }\r\n\r\n        console.log(`Error while deserialize - validation has failed`, {value, parsed});\r\n\r\n        return null;\r\n    };\r\n\r\n}\r\n\r\ntype Configuration<T> = FieldConfiguration<T> & {\r\n    itemSerializer?: (value: any) => string,\r\n    itemDeserializer?: (value: string) => any,\r\n    unique?: boolean\r\n}\r\n","import {MessageType} from \"../MessageType\";\r\nimport {MessageValidator} from \"../../util/MessageValidator\";\r\n\r\nexport type PushToClientMessage = {\r\n    type: MessageType.PushToClient,\r\n    time: number,\r\n    messageId: string,\r\n    payload: string,\r\n    channels?: string[],\r\n}\r\n\r\nexport const pushToClientUtil = new MessageValidator<PushToClientMessage>([\r\n    {field: \"type\", exactValue: MessageType.PushToClient},\r\n    {field: \"time\", type: \"number\"},\r\n    {field: \"messageId\", type: \"string\"},\r\n    {field: \"payload\", type: \"string\"},\r\n    {field: \"channels\", type: \"string[]\", optional: true}\r\n]);\r\n","import {PushToClientMessage} from \"../serverMessage/PushToClientMessage\";\r\nimport {MessageValidator} from \"../../util/MessageValidator\";\r\n\r\nexport type CachedMessage = Omit<PushToClientMessage, \"type\">;\r\nexport const cachedMessageUtil = new MessageValidator<CachedMessage>([\r\n    {field: \"time\", type: \"number\"},\r\n    {field: \"messageId\", type: \"string\"},\r\n    {field: \"channels\", type: \"string[]\"},\r\n    {field: \"payload\", type: \"string\"}\r\n]);\r\n","import {MessageType} from \"../MessageType\";\r\nimport {MessageValidator} from \"../../util/MessageValidator\";\r\nimport {CachedMessage, cachedMessageUtil} from \"../cache/CachedMessage\";\r\n\r\nexport type RestoreChannelsResponseMessage = {\r\n    type: MessageType.RestoreResponse,\r\n    payload: Array<CachedMessage>,\r\n}\r\n\r\nexport const restoreResponseUtil = new MessageValidator<RestoreChannelsResponseMessage>([\r\n    {field: \"type\", exactValue: MessageType.RestoreResponse},\r\n    {\r\n        field: \"payload\",\r\n        type: \"array\",\r\n        itemValidator: cachedMessageUtil.validate,\r\n        itemSerializer: cachedMessageUtil.serialize,\r\n        itemDeserializer: cachedMessageUtil.deserialize,\r\n    }\r\n]);\r\n\r\n\r\n","import {MessageType} from \"../MessageType\";\r\nimport {ChannelId} from \"../ChannelId\";\r\nimport {MessageValidator} from \"../../util/MessageValidator\";\r\n\r\nexport type SubscribeMessage = {\r\n    type: MessageType.Subscribe,\r\n    channels: ChannelId[]\r\n}\r\nexport const subscribeMessageUtil = new MessageValidator<SubscribeMessage>([\r\n    {field: \"type\", exactValue: MessageType.Subscribe},\r\n    {field: \"channels\", type: \"string[]\", unique: true}\r\n]);\r\n","import {MessageType} from \"../MessageType\";\r\nimport {MessageValidator} from \"../../util/MessageValidator\";\r\n\r\nexport type UnsubscribeMessage = {\r\n    type: MessageType.Unsubscribe,\r\n    channels: string[]\r\n}\r\nexport const unsubscribeMessageUtil = new MessageValidator<UnsubscribeMessage>([\r\n    {field: \"type\", exactValue: MessageType.Unsubscribe},\r\n    {field: \"channels\", type: \"string[]\"}\r\n]);\r\n","import {MessageValidator} from \"../../util/MessageValidator\";\r\n\r\n/**\r\n * Message cache filter options\r\n */\r\nexport type CacheFilter = {\r\n    // Max age of returned messages in milliseconds\r\n    maxAge?: number,\r\n    // Max number of entries to return\r\n    maxLength?: number,\r\n    // Non inclusive oldest message id to be returned from cache\r\n    messageId?: string\r\n};\r\nexport const cacheFilterUtil = new MessageValidator<CacheFilter>([\r\n    {field: \"maxAge\", type: \"number\", optional: true, itemValidator: value => value > 0},\r\n    {field: \"maxLength\", type: \"number\", optional: true, itemValidator: value => value > 0},\r\n    {field: \"messageId\", type: \"string\", optional: true, notEmpty: true},\r\n]);\r\n","import {MessageType} from \"../MessageType\";\r\nimport {MessageValidator} from \"../../util/MessageValidator\";\r\nimport {CacheFilter, cacheFilterUtil} from \"../cache/CacheFilter\";\r\n\r\nexport type RestoreChannelsRequestMessage = {\r\n    type: MessageType.RestoreRequest,\r\n    channels: RestoreTarget[]\r\n}\r\n\r\nexport type RestoreTarget = {\r\n    channel: string,\r\n    filter?: CacheFilter\r\n}\r\nconst restoreTargetUtil = new MessageValidator<RestoreTarget>([\r\n    {field: \"channel\", type: \"string\"},\r\n    {field: \"filter\", optional: true, type: \"object\",\r\n        itemValidator: cacheFilterUtil.validate,\r\n        itemSerializer: cacheFilterUtil.serialize,\r\n        itemDeserializer: cacheFilterUtil.deserialize,\r\n    },\r\n]);\r\n\r\nexport const restoreRequestUtil = new MessageValidator<RestoreChannelsRequestMessage>([\r\n    {field: \"type\", exactValue: MessageType.RestoreRequest},\r\n    {\r\n        field: \"channels\",\r\n        type: \"array\",\r\n        itemValidator: value => restoreTargetUtil.validate(value)\r\n    }\r\n]);\r\n","import {MessageType} from \"../MessageType\";\r\nimport {MessageValidator} from \"../../util/MessageValidator\";\r\n\r\nexport type PushToServerMessage = {\r\n    type: MessageType.PushToServer,\r\n    channels: string[],\r\n    payload: string\r\n}\r\n\r\nexport const pushToServerUtil = new MessageValidator<PushToServerMessage>([\r\n    {field: \"type\", exactValue: MessageType.PushToServer},\r\n    {field: \"channels\", type: \"string[]\", unique: true},\r\n    {field: \"payload\", type: \"string\"}\r\n]);\r\n","import {CallbackCollection} from \"../../utils/CallbackCollection\";\r\nimport {Adapter} from \"../data/Adapter\";\r\nimport {RestoreChannelsResponseMessage} from \"@deliveryProtocol/data/serverMessage/RestoreChannelsResponseMessage\";\r\nimport {deserializeServerMessage} from \"@deliveryProtocol/data/serverMessage/ServerMessage\";\r\nimport {MessageType} from \"@deliveryProtocol/data/MessageType\";\r\nimport {subscribeMessageUtil} from \"@deliveryProtocol/data/clientMessage/SubscribeMessage\";\r\nimport {unsubscribeMessageUtil} from \"@deliveryProtocol/data/clientMessage/UnsubscribeMessage\";\r\nimport {restoreRequestUtil, RestoreTarget} from \"@deliveryProtocol/data/clientMessage/RestoreChannelsRequestMessage\";\r\nimport {globalMessageChannel} from \"@deliveryProtocol/data/globalMessageChannel\";\r\nimport {pushToServerUtil} from \"@deliveryProtocol/data/clientMessage/PushToServerMessage\";\r\nimport {PushToClientMessage} from \"@deliveryProtocol/data/serverMessage/PushToClientMessage\";\r\n\r\n\r\nexport class SocketClient {\r\n\r\n    private readonly onMessageCallback = new CallbackCollection<PushToClientMessage>();\r\n    private readonly onRestoreCallback = new CallbackCollection<RestoreChannelsResponseMessage>();\r\n\r\n    constructor(private readonly connection: Adapter) {\r\n        connection.onError(this.errorHandler);\r\n        connection.onMessage(this.messageHandler);\r\n    }\r\n\r\n    private readonly errorHandler = (error: string) => {\r\n        console.error(\"Connection error:\", error);\r\n    };\r\n\r\n    private readonly messageHandler = (data: string) => {\r\n        const {onMessageCallback, onRestoreCallback} = this;\r\n        const message = deserializeServerMessage(data);\r\n        switch (message.type) {\r\n            case MessageType.PushToClient:\r\n                onMessageCallback.execute(message);\r\n                break;\r\n            case MessageType.RestoreResponse:\r\n                onRestoreCallback.execute(message);\r\n                break;\r\n            default:\r\n                console.error(`Message of unknown type received:`, message);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Incoming data message callback\r\n     */\r\n    readonly onMessage = this.onMessageCallback.manage;\r\n\r\n    /**\r\n     * Channel restore data callback\r\n     */\r\n    readonly onRestore = this.onRestoreCallback.manage;\r\n\r\n    /**\r\n     * Subscribe to data channel.\r\n     * @param channels Channel or list of channels to subscribe to\r\n     */\r\n    subscribe(...channels: string[]): void {\r\n        this.connection.send(subscribeMessageUtil.serialize({type: MessageType.Subscribe, channels}));\r\n    }\r\n\r\n    /**\r\n     * Unsubscribe from data channel.\r\n     * @param channels Channel or list of channels to unsubscribe from\r\n     */\r\n    unsubscribe(...channels: string[]): void {\r\n        this.connection.send(unsubscribeMessageUtil.serialize({type: MessageType.Unsubscribe, channels}));\r\n    }\r\n\r\n    /**\r\n     * Restore data channel messages with optional filter\r\n     * @param channels Description of single or list of restore targets consisting of channel name and optional\r\n     * cache filter definitions.\r\n     */\r\n    restore(...channels: RestoreTarget[]): void {\r\n        this.connection.send(restoreRequestUtil.serialize({type: MessageType.RestoreRequest, channels}));\r\n    }\r\n\r\n    /**\r\n     * Send message to all data context subscribers\r\n     * @param data Data to be delivered.\r\n     */\r\n    sendGlobalMessage(data: string): void {\r\n        this.sendChannelMessage(data, globalMessageChannel);\r\n    }\r\n\r\n    /**\r\n     * Send message to subscribers of a single or multiple channels.\r\n     * @param data Data to be delivered.\r\n     * @param channels Channel or list of channels to send message to.\r\n     */\r\n    sendChannelMessage(data: string, ...channels: string[]): void {\r\n        this.connection.send(pushToServerUtil.serialize({\r\n            type: MessageType.PushToServer,\r\n            channels,\r\n            payload: data\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Close connection\r\n     */\r\n    close() {\r\n        this.connection.close();\r\n    }\r\n}\r\n\r\n[\"connection\", \"onMessageCallback\", \"onRestoreCallback\", \"errorHandler\", \"messageHandler\"].forEach(prop =>\r\n    Object.defineProperty(SocketClient, prop, {\r\n        enumerable: false,\r\n        writable: false\r\n    })\r\n);\r\n\r\n\r\n","import {valueBelongsToEnum} from \"ugd10a\";\r\nimport {MessageType} from \"../MessageType\";\r\nimport {PushToClientMessage, pushToClientUtil} from \"./PushToClientMessage\";\r\nimport {RestoreChannelsResponseMessage, restoreResponseUtil} from \"./RestoreChannelsResponseMessage\";\r\n\r\nexport type ServerMessage = PushToClientMessage | RestoreChannelsResponseMessage;\r\n\r\nexport const isServerMessage = (value: unknown): value is ServerMessage =>\r\n    pushToClientUtil.validate(value) ||\r\n    restoreResponseUtil.validate(value);\r\n\r\nexport const serializeServerMessage = (value: ServerMessage): string | null => {\r\n    if (pushToClientUtil.validate(value)) {\r\n        return pushToClientUtil.serialize(value);\r\n    }\r\n    if (restoreResponseUtil.validate(value)) {\r\n        return restoreResponseUtil.serialize(value);\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const deserializeServerMessage = (value: string): ServerMessage | null => {\r\n    let rawData: any[];\r\n    try {\r\n        rawData = JSON.parse(value);\r\n    } catch (e) {\r\n        console.log(`Error while deserialize ServerMessage`, {value, e});\r\n        return null;\r\n    }\r\n\r\n    if (!Array.isArray(rawData) || !rawData.length || !valueBelongsToEnum(MessageType, rawData[0])) {\r\n        console.log(`Error while deserialize ServerMessage 2 `, rawData);\r\n        return null;\r\n    }\r\n\r\n    const type = <any>rawData[0] as MessageType;\r\n    if (type === MessageType.PushToClient) {\r\n        return pushToClientUtil.deserialize(rawData);\r\n    }\r\n    if (type === MessageType.RestoreResponse) {\r\n        return restoreResponseUtil.deserialize(rawData);\r\n    }\r\n    return null;\r\n};\r\n","export const globalMessageChannel = \"/\";\r\n","import {WebSocketAdapter} from \"@deliveryProtocolClient/model/WebSocketAdapter\";\r\nimport {SocketClient} from \"@deliveryProtocolClient/model/SocketClient\";\r\n\r\nexport const createClient = (url: string) => new SocketClient(new WebSocketAdapter(url));\r\nexport const version = \"__buildVersion__\";\r\n"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","push","error","Map","callback","callbacks","has","success","callbackProps","set","onComplete","times","count","executionLimit","once","twice","guard","func","_this","delete","clear","data","executed","callbacks_1","_b","properties","executionCount","manage","bind","CallbackCollection","add","remove","url","onOpenCallback","onMessageCallback","onErrorCallback","onCloseCallback","socket","WebSocket","onopen","execute","onmessage","_a","onerror","event","toString","onclose","code","reason","WebSocketAdapter","readyState","message","send","close","valueBelongsToEnum","object","keys","key","findObjectKeyForValue","uniqueValues","values","newSet","entry","indexOf","CollectionAction","TimePart","MessageType","isArrayOfStrings","Array","isArray","some","v","checkType","type","notEmpty","itemValidator","actualType","config","result","configuration","allowExtraFields","valueKeys","f","optional","exactValue","validator","field","index","entryValue","uniqueTypes","typeResult","splice","configuration_1","validateObject","_lastValidationError","validate","allFields","fieldSerializers","JSON","stringify","map","entrySerializer","get","fieldDeserializers","configMap","parse","console","log","parsed","forEach","parsedValue","rawValue","shift","entryDeserializer","unique","requiredFields","itemSerializer","itemDeserializer","MessageValidator","pushToClientUtil","PushToClient","cachedMessageUtil","restoreResponseUtil","RestoreResponse","serialize","deserialize","subscribeMessageUtil","Subscribe","unsubscribeMessageUtil","Unsubscribe","cacheFilterUtil","restoreTargetUtil","restoreRequestUtil","RestoreRequest","pushToServerUtil","PushToServer","connection","onRestoreCallback","rawData","deserializeServerMessage","onError","errorHandler","onMessage","messageHandler","SocketClient","_i","channels","sendChannelMessage","payload","prop","defineProperty","enumerable","writable"],"mappings":"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"}